#! /usr/bin/env python
import os
import argparse
from benchmark.Experiments import Models
from benchmark.Results import Summary
from benchmark.Utils import ALL_METRICS, Folders

"""List experiments of a model
"""


def parse_arguments():
    ap = argparse.ArgumentParser()
    ap.add_argument(
        "--nan",
        type=bool,
        required=False,
        help="Move nan results to hidden folder",
    )
    ap.add_argument(
        "-s",
        "--score",
        type=str,
        required=False,
        choices=ALL_METRICS,
        help="score name {accuracy, f1-macro, f1-weighted, roc-auc-ovr}",
    )
    models_data = Models.define_models(0)
    models = "{" + ", ".join(models_data) + "}"
    ap.add_argument(
        "-m",
        "--model",
        type=str,
        required=False,
        choices=list(models_data),
        help=f"model name: {models}",
    )
    ap.add_argument(
        "-k",
        "--key",
        type=str,
        required=False,
        default="date",
        help="key to sort results",
    )
    ap.add_argument(
        "--hidden",
        type=str,
        required=False,
        default=False,
        help="Show hidden results",
    )
    ap.add_argument(
        "-n",
        "--number",
        type=int,
        required=False,
        default=0,
        help="number of results to show, 0 to any",
    )
    args = ap.parse_args()

    return (
        args.nan,
        args.score,
        args.model,
        args.key,
        args.number,
        args.hidden,
    )


if __name__ == "__main__":
    (nan, score, model, key, number, hidden) = parse_arguments()
    data = Summary(hidden=hidden)
    data.acquire()
    data.list_results(score=score, model=model, sort_key=key, number=number)
    if nan:
        results_nan = []
        results = data.get_results_criteria(
            score=score,
            model=model,
            input_data=None,
            sort_key=key,
            number=number,
        )
        for result in results:
            if result["metric"] != result["metric"]:
                results_nan.append(result)
        if results_nan != []:
            print(
                "\n"
                + "*" * 30
                + " Results with nan moved to hidden "
                + "*" * 30
            )
            data.list_results(input_data=results_nan)
            for result in results_nan:
                name = result["file"]
                os.rename(
                    os.path.join(Folders.results, name),
                    os.path.join(Folders.hidden_results, name),
                )
